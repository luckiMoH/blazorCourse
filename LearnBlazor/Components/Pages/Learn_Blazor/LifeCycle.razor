@page "/lifecycle"
@using System.Threading

<PageTitle>Life Cycle</PageTitle>

<h3 class="text-success">Blazor Lifecycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />
@count <button class="btn btn-secondary" @onclick="StartCountdown">StartCountdown</button>

<div class="border">
	<_LifeCycleChildComponent CountValue="@currentCount">

	</_LifeCycleChildComponent>
</div>

@foreach (var item in EventType)
{
	<p>@item</p>
	<hr />
}

@code {
	private int currentCount = 0;
	private int count = 5;

	List<string> EventType = new List<string>();

	private void IncrementCount()
	{
		currentCount++;
	}

	protected override async Task OnInitializedAsync()
	{
		EventType.Add("OnInitializedAsync is called");
	}

	protected override void OnInitialized()
	{
		EventType.Add("OnInitialized is called");
	}

	protected override void OnParametersSet()
	{
		EventType.Add("OnParametersSet is called");
	}

	protected override async Task OnParametersSetAsync()
	{
		EventType.Add("OnParametersSetAsync is called");
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			currentCount = 100;
		} else
		{
			currentCount = 200;
		}
		EventType.Add("OnAfterRender is called");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		EventType.Add("OnAfterRenderAsync is called");
	}

	protected override bool ShouldRender()
	{
		EventType.Add("ShouldRender is called");
		return true;
	}

	void StartCountdown()
	{
		var timer = new Timer(TimeCallBack, null, 1000, 1000);
	}

	void TimeCallBack(object state)
	{
		if(count > 0)
		{
			count--;
			InvokeAsync(StateHasChanged);
		}
	} 
}
